name: zap

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: 'https://www.zaproxy.org'
      - run: ls
      - name: GitHub Script
        uses: actions/github-script@v4.0.2
        with:
          script: |
            const fs = require('fs');
            const parse = (object) => {
              const rules  = object.site.reduce((acc, cur) => {
                const alerts = cur.alerts.map(alert => {
                  return { 
                    id: alert.alertRef.toString(),
                    shortDescription: { text: alert.name },
                    fullDescription: { text: alert.desc },
                    helpUri: `https://www.zaproxy.org/docs/alerts/${alert.alertRef}` 
                  }
               })

                for (let rule in alerts) {
                  if (!acc.some((r) => r.id.toString() === alerts[rule].id.toString())) {
                    acc.push(alerts[rule])
                  }
                }
                return acc;
              } , [])

              const results = object.site.reduce((acc, site) => {
                 site.alerts.forEach((cur) => {
                  const alert = {
                  ruleId: cur.alertRef.toString(),
                  // message: { text: `${cur.name} - ${instance.uri} - ${instance.kind} - ${instance.evidence}` }, 
                  message: { text: `# ${cur.name}
                  ${cur.instances && cur.instances.map(instance => {
                    return `${instance.uri} - ${instance.kind} - ${instance.evidence} `
                  }).join('\n\r <br/><br/>')}
                  `},
                  locations: cur.instances && cur.instances.map(instance => {
                      return {
                        physicalLocation: {
                          artifactLocation: {
                            uri: instance.uri.replace(/(^\w+:|^)\/\//, '').replace(/\/$/, "")
                          },
                          region: {
                            startLine: 1
                          }
                        },
                        logicalLocations: [
                          {
                            name: instance.uri,
                            kind: instance.method,
                            fullyQualifiedName: instance.evidence
                          }
                        ]
                      } 
                    })
                  }
                  acc.push(alert);
                 });
                return acc
              }, []);

              return {
               "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
               "version": "2.1.0",
                runs: [{
                  tool: {
                    driver: {
                       name: "ZAProxy",
                       informationUri: "https://www.zaproxy.org/",
                       rules: rules
                    }
                  }, 
                  results: results
                }]
              }
            }

            const data = fs.readFileSync('./report_json.json', {encoding:'utf8', flag:'r'});
            const result = parse(JSON.parse(data));
            console.log(JSON.stringify(result))
            fs.writeFileSync('results.sarif', JSON.stringify(result))
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
